# Benchmark Makefile for Tiny-Clj
# Usage: make -f Makefile.benchmark benchmark

.PHONY: benchmark benchmark-analyze benchmark-baseline benchmark-compare clean-benchmarks test-all

# Run all tests first, then benchmarks with change analysis
benchmark: test-all
	@echo "=== All Tests Passed! Running Performance Benchmarks with Analysis ==="
	@./scripts/benchmark_with_analysis.sh


# Run benchmarks with detailed change analysis
benchmark-analyze: test-all
	@echo "=== Running Enhanced Benchmark Analysis ==="
	@./scripts/benchmark_with_analysis.sh --update-baseline

# Run all tests to verify everything works
test-all:
	@echo "=== Running All Tests First ==="
	@echo "1. Running Clojure Core tests..."
	@make test-clojure-core > /dev/null 2>&1
	@./test-clojure-core > /dev/null 2>&1
	@echo "   ✓ Clojure Core tests passed"
	@echo "2. Running Namespace tests..."
	@make test-namespace-unity > /dev/null 2>&1
	@./test-namespace-unity > /dev/null 2>&1
	@echo "   ✓ Namespace tests passed"
	@echo "3. Running Global Singletons tests..."
	@make test-global-singletons-unity > /dev/null 2>&1
	@./test-global-singletons-unity > /dev/null 2>&1
	@echo "   ✓ Global Singletons tests passed"
	@echo "4. Running ALLOC Macros tests..."
	@make test-alloc-macros-unity > /dev/null 2>&1
	@./test-alloc-macros-unity > /dev/null 2>&1
	@echo "   ✓ ALLOC Macros tests passed"
	@echo "5. Running Executable Size tests..."
	@make test-executable-size > /dev/null 2>&1
	@./test-executable-size > /dev/null 2>&1
	@echo "   ✓ Executable Size tests passed"
	@echo ""

# Create baseline from current results (only if tests pass)
benchmark-baseline: benchmark
	@echo "=== Creating Performance Baseline ==="
	@cp benchmark_results.csv benchmark_baseline.csv
	@echo "✓ Baseline created from current benchmark results"
	@echo "Run 'make benchmark-compare' to compare future runs"

# Compare with baseline using analyzer
benchmark-compare: test-all
	@echo "=== Running Performance Change Analysis ==="
	@make test-benchmark-simple > /dev/null 2>&1
	@./test-benchmark-simple > benchmark_output.txt
	@./scripts/benchmark_with_analysis.sh

# Clean benchmark files
clean-benchmarks:
	@rm -f benchmark_results.csv benchmark_baseline.csv benchmark_output.txt
	@echo "Benchmark files cleaned"

# Help
help:
	@echo "Available benchmark targets:"
	@echo "  benchmark          - Run all tests, then benchmarks with change analysis"
	@echo "  benchmark-analyze  - Run enhanced benchmark analysis and update baseline"
	@echo "  test-all           - Run all tests to verify everything works"
	@echo "  benchmark-baseline - Create baseline from current results"
	@echo "  benchmark-compare  - Compare with baseline using analyzer"
	@echo "  clean-benchmarks   - Clean benchmark files"
	@echo "  help              - Show this help"
