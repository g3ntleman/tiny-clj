[  0%] Building C object CMakeFiles/tiny-clj-stm32-main.dir/src/main_stm32.c.o
[  1%] Building C object CMakeFiles/tiny-clj-stm32-main.dir/src/platform_stm32.c.o
[  2%] Building C object CMakeFiles/tiny-clj-stm32-main.dir/src/clojure_core.c.o
[  3%] Building C object CMakeFiles/tiny-clj-stm32-main.dir/src/types.c.o
[  4%] Building C object CMakeFiles/tiny-clj-stm32-main.dir/src/object.c.o
[  6%] Building C object CMakeFiles/tiny-clj-stm32-main.dir/src/builtins.c.o
[  7%] Building C object CMakeFiles/tiny-clj-stm32-main.dir/src/runtime.c.o
[  8%] Building C object CMakeFiles/tiny-clj-stm32-main.dir/src/namespace.c.o
[  8%] Building C object CMakeFiles/tiny-clj-stm32-main.dir/src/symbol.c.o
[  9%] Building C object CMakeFiles/tiny-clj-stm32-main.dir/src/exception.c.o
[ 11%] Building C object CMakeFiles/tiny-clj-stm32-main.dir/src/parser.c.o
[ 12%] Building C object CMakeFiles/tiny-clj-stm32-main.dir/src/reader.c.o
[ 13%] Building C object CMakeFiles/tiny-clj-stm32-main.dir/src/function_call.c.o
[ 14%] Building C object CMakeFiles/tiny-clj-stm32-main.dir/src/list_operations.c.o
[ 16%] Building C object CMakeFiles/tiny-clj-stm32-main.dir/src/vector.c.o
[ 17%] Building C object CMakeFiles/tiny-clj-stm32-main.dir/src/map.c.o
/Users/theisen/Projects/tiny-clj/src/map.c:37:14: warning: incompatible pointer types initializing 'CljObject *' (aka 'struct CljObject *') with an expression of type 'CljMap *' [-Wincompatible-pointer-types]
   37 |   CljObject *obj = ALLOC(CljMap, 1);
      |              ^     ~~~~~~~~~~~~~~~~
1 warning generated.
[ 17%] Building C object CMakeFiles/tiny-clj-stm32-main.dir/src/string.c.o
[ 18%] Building C object CMakeFiles/tiny-clj-stm32-main.dir/src/seq.c.o
[ 19%] Building C object CMakeFiles/tiny-clj-stm32-main.dir/src/memory_profiler.c.o
/Users/theisen/Projects/tiny-clj/src/memory_profiler.c:71:23: warning: unused variable 'g_hook_func' [-Wunused-variable]
   71 | static MemoryHookFunc g_hook_func = NULL;
      |                       ^~~~~~~~~~~
1 warning generated.
[ 20%] Building C object CMakeFiles/tiny-clj-stm32-main.dir/src/memory.c.o
[ 22%] Linking C executable tiny-clj-stm32-main
[ 22%] Built target tiny-clj-stm32-main
[ 23%] Building C object CMakeFiles/tiny-clj-repl.dir/src/repl.c.o
/Users/theisen/Projects/tiny-clj/src/repl.c:84:28: warning: address of array 'ex->type' will always evaluate to 'true' [-Wpointer-bool-conversion]
   84 |     const char *type = ex->type ? ex->type : "Error";
      |                        ~~~~^~~~ ~
/Users/theisen/Projects/tiny-clj/src/repl.c:85:31: warning: address of array 'ex->message' will always evaluate to 'true' [-Wpointer-bool-conversion]
   85 |     const char *message = ex->message ? ex->message : "Unknown error";
      |                           ~~~~^~~~~~~ ~
/Users/theisen/Projects/tiny-clj/src/repl.c:86:28: warning: address of array 'ex->file' will always evaluate to 'true' [-Wpointer-bool-conversion]
   86 |     const char *file = ex->file ? ex->file : "?";
      |                        ~~~~^~~~ ~
3 warnings generated.
[ 24%] Building C object CMakeFiles/tiny-clj-repl.dir/src/platform_macos.c.o
[ 24%] Building C object CMakeFiles/tiny-clj-repl.dir/src/line_editor.c.o
[ 25%] Building C object CMakeFiles/tiny-clj-repl.dir/src/clojure_core.c.o
[ 27%] Building C object CMakeFiles/tiny-clj-repl.dir/src/types.c.o
[ 28%] Building C object CMakeFiles/tiny-clj-repl.dir/src/object.c.o
[ 29%] Building C object CMakeFiles/tiny-clj-repl.dir/src/builtins.c.o
[ 30%] Building C object CMakeFiles/tiny-clj-repl.dir/src/runtime.c.o
[ 32%] Building C object CMakeFiles/tiny-clj-repl.dir/src/namespace.c.o
[ 33%] Building C object CMakeFiles/tiny-clj-repl.dir/src/symbol.c.o
[ 33%] Building C object CMakeFiles/tiny-clj-repl.dir/src/exception.c.o
[ 34%] Building C object CMakeFiles/tiny-clj-repl.dir/src/parser.c.o
[ 35%] Building C object CMakeFiles/tiny-clj-repl.dir/src/reader.c.o
[ 37%] Building C object CMakeFiles/tiny-clj-repl.dir/src/function_call.c.o
[ 38%] Building C object CMakeFiles/tiny-clj-repl.dir/src/list_operations.c.o
[ 39%] Building C object CMakeFiles/tiny-clj-repl.dir/src/vector.c.o
[ 40%] Building C object CMakeFiles/tiny-clj-repl.dir/src/map.c.o
/Users/theisen/Projects/tiny-clj/src/map.c:37:14: warning: incompatible pointer types initializing 'CljObject *' (aka 'struct CljObject *') with an expression of type 'CljMap *' [-Wincompatible-pointer-types]
   37 |   CljObject *obj = ALLOC(CljMap, 1);
      |              ^     ~~~~~~~~~~~~~~~~
1 warning generated.
[ 41%] Building C object CMakeFiles/tiny-clj-repl.dir/src/string.c.o
[ 41%] Building C object CMakeFiles/tiny-clj-repl.dir/src/seq.c.o
[ 43%] Building C object CMakeFiles/tiny-clj-repl.dir/src/memory_profiler.c.o
[ 44%] Building C object CMakeFiles/tiny-clj-repl.dir/src/memory.c.o
[ 45%] Linking C executable tiny-clj-repl
[ 45%] Built target tiny-clj-repl
[ 46%] Building C object CMakeFiles/tiny-clj-stm32.dir/src/repl.c.o
/Users/theisen/Projects/tiny-clj/src/repl.c:84:28: warning: address of array 'ex->type' will always evaluate to 'true' [-Wpointer-bool-conversion]
   84 |     const char *type = ex->type ? ex->type : "Error";
      |                        ~~~~^~~~ ~
/Users/theisen/Projects/tiny-clj/src/repl.c:85:31: warning: address of array 'ex->message' will always evaluate to 'true' [-Wpointer-bool-conversion]
   85 |     const char *message = ex->message ? ex->message : "Unknown error";
      |                           ~~~~^~~~~~~ ~
/Users/theisen/Projects/tiny-clj/src/repl.c:86:28: warning: address of array 'ex->file' will always evaluate to 'true' [-Wpointer-bool-conversion]
   86 |     const char *file = ex->file ? ex->file : "?";
      |                        ~~~~^~~~ ~
3 warnings generated.
[ 48%] Building C object CMakeFiles/tiny-clj-stm32.dir/src/platform_stm32.c.o
[ 49%] Building C object CMakeFiles/tiny-clj-stm32.dir/src/clojure_core.c.o
[ 50%] Building C object CMakeFiles/tiny-clj-stm32.dir/src/types.c.o
[ 50%] Building C object CMakeFiles/tiny-clj-stm32.dir/src/object.c.o
[ 51%] Building C object CMakeFiles/tiny-clj-stm32.dir/src/builtins.c.o
[ 53%] Building C object CMakeFiles/tiny-clj-stm32.dir/src/runtime.c.o
[ 54%] Building C object CMakeFiles/tiny-clj-stm32.dir/src/namespace.c.o
[ 55%] Building C object CMakeFiles/tiny-clj-stm32.dir/src/symbol.c.o
[ 56%] Building C object CMakeFiles/tiny-clj-stm32.dir/src/exception.c.o
[ 58%] Building C object CMakeFiles/tiny-clj-stm32.dir/src/parser.c.o
[ 59%] Building C object CMakeFiles/tiny-clj-stm32.dir/src/reader.c.o
[ 60%] Building C object CMakeFiles/tiny-clj-stm32.dir/src/function_call.c.o
[ 60%] Building C object CMakeFiles/tiny-clj-stm32.dir/src/list_operations.c.o
[ 61%] Building C object CMakeFiles/tiny-clj-stm32.dir/src/vector.c.o
[ 62%] Building C object CMakeFiles/tiny-clj-stm32.dir/src/map.c.o
/Users/theisen/Projects/tiny-clj/src/map.c:37:14: warning: incompatible pointer types initializing 'CljObject *' (aka 'struct CljObject *') with an expression of type 'CljMap *' [-Wincompatible-pointer-types]
   37 |   CljObject *obj = ALLOC(CljMap, 1);
      |              ^     ~~~~~~~~~~~~~~~~
1 warning generated.
[ 64%] Building C object CMakeFiles/tiny-clj-stm32.dir/src/string.c.o
[ 65%] Building C object CMakeFiles/tiny-clj-stm32.dir/src/seq.c.o
[ 66%] Building C object CMakeFiles/tiny-clj-stm32.dir/src/memory_profiler.c.o
/Users/theisen/Projects/tiny-clj/src/memory_profiler.c:71:23: warning: unused variable 'g_hook_func' [-Wunused-variable]
   71 | static MemoryHookFunc g_hook_func = NULL;
      |                       ^~~~~~~~~~~
1 warning generated.
[ 67%] Building C object CMakeFiles/tiny-clj-stm32.dir/src/memory.c.o
[ 69%] Linking C executable tiny-clj-stm32
[ 69%] Built target tiny-clj-stm32
[ 70%] Building C object CMakeFiles/unity-tests.dir/src/tests/unity_test_runner.c.o
[ 71%] Building C object CMakeFiles/unity-tests.dir/src/tests/memory_tests.c.o
/Users/theisen/Projects/tiny-clj/src/tests/memory_tests.c:123:13: warning: unused function 'print_usage' [-Wunused-function]
  123 | static void print_usage(const char *program_name) {
      |             ^~~~~~~~~~~
/Users/theisen/Projects/tiny-clj/src/tests/memory_tests.c:140:13: warning: unused function 'list_tests' [-Wunused-function]
  140 | static void list_tests(void) {
      |             ^~~~~~~~~~
/Users/theisen/Projects/tiny-clj/src/tests/memory_tests.c:151:13: warning: unused function 'run_specific_test' [-Wunused-function]
  151 | static void run_specific_test(const char *test_name) {
      |             ^~~~~~~~~~~~~~~~~
3 warnings generated.
[ 72%] Building C object CMakeFiles/unity-tests.dir/src/tests/parser_tests.c.o
/Users/theisen/Projects/tiny-clj/src/tests/parser_tests.c:140:13: warning: unused function 'print_usage' [-Wunused-function]
  140 | static void print_usage(const char *program_name) {
      |             ^~~~~~~~~~~
/Users/theisen/Projects/tiny-clj/src/tests/parser_tests.c:154:13: warning: unused function 'run_specific_test' [-Wunused-function]
  154 | static void run_specific_test(const char *test_name) {
      |             ^~~~~~~~~~~~~~~~~
2 warnings generated.
[ 72%] Building C object CMakeFiles/unity-tests.dir/src/tests/exception_tests.c.o
/Users/theisen/Projects/tiny-clj/src/tests/exception_tests.c:162:13: warning: unused function 'print_usage' [-Wunused-function]
  162 | static void print_usage(const char *program_name) {
      |             ^~~~~~~~~~~
/Users/theisen/Projects/tiny-clj/src/tests/exception_tests.c:177:13: warning: unused function 'run_specific_test' [-Wunused-function]
  177 | static void run_specific_test(const char *test_name) {
      |             ^~~~~~~~~~~~~~~~~
2 warnings generated.
[ 74%] Building C object CMakeFiles/unity-tests.dir/src/tests/unit_tests.c.o
[ 75%] Building C object CMakeFiles/unity-tests.dir/src/tests/namespace_tests.c.o
/Users/theisen/Projects/tiny-clj/src/tests/namespace_tests.c:48:20: warning: incompatible pointer types initializing 'CljObject *' (aka 'struct CljObject *') with an expression of type 'CljNamespace *' (aka 'struct CljNamespace *') [-Wincompatible-pointer-types]
   48 |         CljObject *initial_ns = eval_state->current_ns;
      |                    ^            ~~~~~~~~~~~~~~~~~~~~~~
/Users/theisen/Projects/tiny-clj/src/memory.h:140:9: note: expanded from macro 'WITH_AUTORELEASE_POOL'
  140 |         code; \
      |         ^~~~
/Users/theisen/Projects/tiny-clj/src/tests/namespace_tests.c:82:20: warning: incompatible pointer types initializing 'CljObject *' (aka 'struct CljObject *') with an expression of type 'CljNamespace *' (aka 'struct CljNamespace *') [-Wincompatible-pointer-types]
   82 |         CljObject *ns_var = eval_state->current_ns;
      |                    ^        ~~~~~~~~~~~~~~~~~~~~~~
/Users/theisen/Projects/tiny-clj/src/memory.h:140:9: note: expanded from macro 'WITH_AUTORELEASE_POOL'
  140 |         code; \
      |         ^~~~
2 warnings generated.
[ 76%] Building C object CMakeFiles/unity-tests.dir/src/tests/seq_tests.c.o
/Users/theisen/Projects/tiny-clj/src/tests/seq_tests.c:85:20: warning: unused variable 'seq' [-Wunused-variable]
   85 |         CljObject *seq = seq_create(map);
      |                    ^~~
/Users/theisen/Projects/tiny-clj/src/memory.h:140:9: note: expanded from macro 'WITH_AUTORELEASE_POOL'
  140 |         code; \
      |         ^~~~
1 warning generated.
[ 77%] Building C object CMakeFiles/unity-tests.dir/src/tests/for_loop_tests.c.o
/Users/theisen/Projects/tiny-clj/src/tests/for_loop_tests.c:40:76: warning: incompatible pointer types passing 'CljList *' (aka 'struct CljList *') to parameter of type 'CljObject *' (aka 'struct CljObject *') [-Wincompatible-pointer-types]
   29 |         // Create binding list: [i 3]
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   30 |         CljList *binding_list = make_list(intern_symbol_global("i"), (CljObject*)make_list(make_int(3), (CljObject*)NULL));
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   31 |         
   32 |         // Create body: 42 - simple literal without symbol resolution
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   33 |         CljObject *body = make_int(42);
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   34 |         
   35 |         // Create function call: (dotimes [i 3] 42)
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   36 |         CljList *dotimes_call = make_list(intern_symbol_global("dotimes"), make_list((CljObject*)binding_list, (CljObject*)make_list(body, (CljObject*)NULL)));
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   37 |         
   38 |         // Test dotimes evaluation - should not crash
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   39 |         CljObject *result = eval_dotimes((CljObject*)dotimes_call, NULL);
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   40 |         TEST_ASSERT_TRUE(result == NULL || result->type == CLJ_NIL);
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   41 |         
   42 |         // Clean up all objects
      |         ~~~~~~~~~~~~~~~~~~~~~~~
   43 |         RELEASE((CljObject*)binding_list);
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   44 |         RELEASE(body);
      |         ~~~~~~~~~~~~~~
/Users/theisen/Projects/tiny-clj/src/memory.h:140:9: note: expanded from macro 'WITH_AUTORELEASE_POOL'
  140 |         code; \
      |         ^~~~
/Users/theisen/Projects/tiny-clj/src/object.h:186:49: note: passing argument to parameter 'rest' here
  186 | CljList* make_list(CljObject *first, CljObject *rest);
      |                                                 ^
/Users/theisen/Projects/tiny-clj/src/tests/for_loop_tests.c:75:72: warning: incompatible pointer types passing 'CljList *' (aka 'struct CljList *') to parameter of type 'CljObject *' (aka 'struct CljObject *') [-Wincompatible-pointer-types]
   54 |         // Create binding list: [x [1 2 3]]
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   55 |         CljList *binding_list = make_list(intern_symbol_global("x"), (CljObject*)make_list(vec, (CljObject*)NULL));
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   56 |         
   57 |         // Create body: x - simple symbol reference
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   58 |         CljObject *body = intern_symbol_global("x");
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   59 |         
   60 |         // Create function call: (doseq [x [1 2 3]] x)
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   61 |         CljList *doseq_call = make_list(intern_symbol_global("doseq"), make_list((CljObject*)binding_list, (CljObject*)make_list(body, (CljObject*)NULL)));
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   62 |         
   63 |         // Test doseq evaluation - should not crash
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   64 |         CljObject *result = eval_doseq((CljObject*)doseq_call, NULL);
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   65 |         TEST_ASSERT_TRUE(result == NULL || result->type == CLJ_NIL);
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   66 |         
   67 |         // Clean up all objects
      |         ~~~~~~~~~~~~~~~~~~~~~~~
   68 |         RELEASE((CljObject*)binding_list);
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   69 |         RELEASE(body);
      |         ~~~~~~~~~~~~~~
/Users/theisen/Projects/tiny-clj/src/memory.h:140:9: note: expanded from macro 'WITH_AUTORELEASE_POOL'
  140 |         code; \
      |         ^~~~
/Users/theisen/Projects/tiny-clj/src/object.h:186:49: note: passing argument to parameter 'rest' here
  186 | CljList* make_list(CljObject *first, CljObject *rest);
      |                                                 ^
/Users/theisen/Projects/tiny-clj/src/tests/for_loop_tests.c:110:68: warning: incompatible pointer types passing 'CljList *' (aka 'struct CljList *') to parameter of type 'CljObject *' (aka 'struct CljObject *') [-Wincompatible-pointer-types]
   89 |         // Create binding list: [x [1 2 3]]
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   90 |         CljList *binding_list = make_list(intern_symbol_global("x"), (CljObject*)make_list(vec, (CljObject*)NULL));
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   91 |         
   92 |         // Create body: x - simple symbol reference
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   93 |         CljObject *body = intern_symbol_global("x");
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   94 |         
   95 |         // Create function call: (for [x [1 2 3]] x)
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   96 |         CljList *for_call = make_list(intern_symbol_global("for"), make_list((CljObject*)binding_list, (CljObject*)make_list(body, (CljObject*)NULL)));
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   97 |         
   98 |         // Test for evaluation - should not crash
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   99 |         CljObject *result = eval_for((CljObject*)for_call, NULL);
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  100 |         // Note: eval_for may not be implemented yet - just test it doesn't crash
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  101 |         // TEST_ASSERT_TRUE(result == NULL || result->type == CLJ_NIL); // Commented out - function may not exist
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  102 |         
  103 |         // Clean up all objects
      |         ~~~~~~~~~~~~~~~~~~~~~~~
  104 |         RELEASE((CljObject*)binding_list);
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/theisen/Projects/tiny-clj/src/memory.h:140:9: note: expanded from macro 'WITH_AUTORELEASE_POOL'
  140 |         code; \
      |         ^~~~
/Users/theisen/Projects/tiny-clj/src/object.h:186:49: note: passing argument to parameter 'rest' here
  186 | CljList* make_list(CljObject *first, CljObject *rest);
      |                                                 ^
/Users/theisen/Projects/tiny-clj/src/tests/for_loop_tests.c:113:20: warning: unused variable 'result' [-Wunused-variable]
  113 |         CljObject *result = eval_for((CljObject*)for_call, NULL);
      |                    ^~~~~~
/Users/theisen/Projects/tiny-clj/src/memory.h:140:9: note: expanded from macro 'WITH_AUTORELEASE_POOL'
  140 |         code; \
      |         ^~~~
/Users/theisen/Projects/tiny-clj/src/tests/for_loop_tests.c:137:76: warning: incompatible pointer types passing 'CljList *' (aka 'struct CljList *') to parameter of type 'CljObject *' (aka 'struct CljObject *') [-Wincompatible-pointer-types]
  125 |         // Create binding list: [i 3]
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  126 |         CljList *binding_list = make_list(intern_symbol_global("i"), (CljObject*)make_list(make_int(3), (CljObject*)NULL));
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  127 |         
  128 |         // Create body: i - symbol reference
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  129 |         CljObject *body = intern_symbol_global("i");
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  130 |         
  131 |         // Create function call: (dotimes [i 3] i)
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  132 |         CljList *dotimes_call = make_list(intern_symbol_global("dotimes"), make_list((CljObject*)binding_list, (CljObject*)make_list(body, (CljObject*)NULL)));
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  133 |         
  134 |         // Test dotimes evaluation with environment
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  135 |         CljObject *result = eval_dotimes((CljObject*)dotimes_call, eval_state);
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  136 |         TEST_ASSERT_TRUE(result == NULL || result->type == CLJ_NIL);
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  137 |         
  138 |         // Clean up
      |         ~~~~~~~~~~~
  139 |         evalstate_free(eval_state);
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  140 |         RELEASE((CljObject*)binding_list);
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/theisen/Projects/tiny-clj/src/memory.h:140:9: note: expanded from macro 'WITH_AUTORELEASE_POOL'
  140 |         code; \
      |         ^~~~
/Users/theisen/Projects/tiny-clj/src/object.h:186:49: note: passing argument to parameter 'rest' here
  186 | CljList* make_list(CljObject *first, CljObject *rest);
      |                                                 ^
/Users/theisen/Projects/tiny-clj/src/tests/for_loop_tests.c:140:68: warning: incompatible pointer types passing 'EvalState *' to parameter of type 'CljObject *' (aka 'struct CljObject *') [-Wincompatible-pointer-types]
  140 |         CljObject *result = eval_dotimes((CljObject*)dotimes_call, eval_state);
      |                                                                    ^~~~~~~~~~
/Users/theisen/Projects/tiny-clj/src/memory.h:140:9: note: expanded from macro 'WITH_AUTORELEASE_POOL'
  140 |         code; \
      |         ^~~~
/Users/theisen/Projects/tiny-clj/src/function_call.h:40:53: note: passing argument to parameter 'env' here
   40 | CljObject* eval_dotimes(CljObject *list, CljObject *env);
      |                                                     ^
/Users/theisen/Projects/tiny-clj/src/tests/for_loop_tests.c:174:72: warning: incompatible pointer types passing 'CljList *' (aka 'struct CljList *') to parameter of type 'CljObject *' (aka 'struct CljObject *') [-Wincompatible-pointer-types]
  152 |         // Create binding list: [x [1 2 3]]
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  153 |         CljList *binding_list = make_list(intern_symbol_global("x"), (CljObject*)make_list(vec, (CljObject*)NULL));
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  154 |         
  155 |         // Create body: x - symbol reference
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  156 |         CljObject *body = intern_symbol_global("x");
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  157 |         
  158 |         // Create function call: (doseq [x [1 2 3]] x)
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  159 |         CljList *doseq_call = make_list(intern_symbol_global("doseq"), make_list((CljObject*)binding_list, (CljObject*)make_list(body, (CljObject*)NULL)));
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  160 |         
  161 |         // Test doseq evaluation with environment
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  162 |         CljObject *result = eval_doseq((CljObject*)doseq_call, eval_state);
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  163 |         TEST_ASSERT_TRUE(result == NULL || result->type == CLJ_NIL);
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  164 |         
  165 |         // Clean up
      |         ~~~~~~~~~~~
  166 |         evalstate_free(eval_state);
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  167 |         RELEASE((CljObject*)binding_list);
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/theisen/Projects/tiny-clj/src/memory.h:140:9: note: expanded from macro 'WITH_AUTORELEASE_POOL'
  140 |         code; \
      |         ^~~~
/Users/theisen/Projects/tiny-clj/src/object.h:186:49: note: passing argument to parameter 'rest' here
  186 | CljList* make_list(CljObject *first, CljObject *rest);
      |                                                 ^
/Users/theisen/Projects/tiny-clj/src/tests/for_loop_tests.c:177:64: warning: incompatible pointer types passing 'EvalState *' to parameter of type 'CljObject *' (aka 'struct CljObject *') [-Wincompatible-pointer-types]
  177 |         CljObject *result = eval_doseq((CljObject*)doseq_call, eval_state);
      |                                                                ^~~~~~~~~~
/Users/theisen/Projects/tiny-clj/src/memory.h:140:9: note: expanded from macro 'WITH_AUTORELEASE_POOL'
  140 |         code; \
      |         ^~~~
/Users/theisen/Projects/tiny-clj/src/function_call.h:39:51: note: passing argument to parameter 'env' here
   39 | CljObject* eval_doseq(CljObject *list, CljObject *env);
      |                                                   ^
8 warnings generated.
[ 79%] Building C object CMakeFiles/unity-tests.dir/external/unity/src/unity.c.o
[ 80%] Building C object CMakeFiles/unity-tests.dir/src/builtins.c.o
[ 81%] Building C object CMakeFiles/unity-tests.dir/src/object.c.o
[ 81%] Building C object CMakeFiles/unity-tests.dir/src/types.c.o
[ 82%] Building C object CMakeFiles/unity-tests.dir/src/vector.c.o
[ 83%] Building C object CMakeFiles/unity-tests.dir/src/map.c.o
/Users/theisen/Projects/tiny-clj/src/map.c:37:14: warning: incompatible pointer types initializing 'CljObject *' (aka 'struct CljObject *') with an expression of type 'CljMap *' [-Wincompatible-pointer-types]
   37 |   CljObject *obj = ALLOC(CljMap, 1);
      |              ^     ~~~~~~~~~~~~~~~~
1 warning generated.
[ 85%] Building C object CMakeFiles/unity-tests.dir/src/string.c.o
[ 86%] Building C object CMakeFiles/unity-tests.dir/src/symbol.c.o
[ 87%] Building C object CMakeFiles/unity-tests.dir/src/namespace.c.o
[ 88%] Building C object CMakeFiles/unity-tests.dir/src/parser.c.o
[ 90%] Building C object CMakeFiles/unity-tests.dir/src/reader.c.o
[ 90%] Building C object CMakeFiles/unity-tests.dir/src/function_call.c.o
[ 91%] Building C object CMakeFiles/unity-tests.dir/src/list_operations.c.o
[ 92%] Building C object CMakeFiles/unity-tests.dir/src/seq.c.o
[ 93%] Building C object CMakeFiles/unity-tests.dir/src/clojure_core.c.o
[ 95%] Building C object CMakeFiles/unity-tests.dir/src/exception.c.o
[ 96%] Building C object CMakeFiles/unity-tests.dir/src/memory_profiler.c.o
[ 97%] Building C object CMakeFiles/unity-tests.dir/src/memory.c.o
[ 98%] Building C object CMakeFiles/unity-tests.dir/src/runtime.c.o
[100%] Linking C executable unity-tests
[100%] Built target unity-tests
